{"/home/travis/build/npmtest/node-npmtest-sanitizer/test.js":"/* istanbul instrument in package npmtest_sanitizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sanitizer/lib.npmtest_sanitizer.js":"/* istanbul instrument in package npmtest_sanitizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sanitizer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sanitizer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sanitizer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sanitizer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sanitizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sanitizer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sanitizer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sanitizer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sanitizer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sanitizer.__dirname + '/lib.npmtest_sanitizer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sanitizer/node_modules/sanitizer/sanitizer.js":"var html4 = require(\"./lib/html4.js\");\nvar URI = require(\"./lib/uri.js\");\n\n// Copyright (C) 2006 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview\n * An HTML sanitizer that can satisfy a variety of security policies.\n *\n * <p>\n * The HTML sanitizer is built around a SAX parser and HTML element and\n * attributes schemas.\n *\n * If the cssparser is loaded, inline styles are sanitized using the\n * css property and value schemas.  Else they are remove during\n * sanitization.\n *\n * If it exists, uses parseCssDeclarations, sanitizeCssProperty,  cssSchema\n *\n * @author mikesamuel@gmail.com\n * @author jasvir@gmail.com\n * \\@requires html4, URI\n * \\@overrides window\n * \\@provides html, html_sanitize\n */\n\n// The Turkish i seems to be a non-issue, but abort in case it is.\nif ('I'.toLowerCase() !== 'i') { throw 'I/i problem'; }\n\n/**\n * \\@namespace\n */\nvar html = (function(html4) {\n\n    // For closure compiler\n    var parseCssDeclarations, sanitizeCssProperty, cssSchema;\n    if ('undefined' !== typeof window) {\n        parseCssDeclarations = window['parseCssDeclarations'];\n        sanitizeCssProperty = window['sanitizeCssProperty'];\n        cssSchema = window['cssSchema'];\n    }\n\n    // The keys of this object must be 'quoted' or JSCompiler will mangle them!\n    // This is a partial list -- lookupEntity() uses the host browser's parser\n    // (when available) to implement full entity lookup.\n    // Note that entities are in general case-sensitive; the uppercase ones are\n    // explicitly defined by HTML5 (presumably as compatibility).\n    var ENTITIES = {\n        'lt': '<',\n        'LT': '<',\n        'gt': '>',\n        'GT': '>',\n        'amp': '&',\n        'AMP': '&',\n        'quot': '\"',\n        'apos': '\\'',\n        'nbsp': '\\u00a0'\n    };\n\n    // Patterns for types of entity/character reference names.\n    var decimalEscapeRe = /^#(\\d+)$/;\n    var hexEscapeRe = /^#x([0-9A-Fa-f]+)$/;\n    // contains every entity per http://www.w3.org/TR/2011/WD-html5-20110113/named-character-references.html\n    var safeEntityNameRe = /^[A-Za-z][A-za-z0-9]+$/;\n    // Used as a hook to invoke the browser's entity parsing. <textarea> is used\n    // because its content is parsed for entities but not tags.\n    // TODO(kpreid): This retrieval is a kludge and leads to silent loss of\n    // functionality if the document isn't available.\n    var entityLookupElement =\n        ('undefined' !== typeof window && window['document'])\n            ? window['document'].createElement('textarea') : null;\n    /**\n     * Decodes an HTML entity.\n     *\n     * {\\@updoc\n     * $ lookupEntity('lt')\n     * # '<'\n     * $ lookupEntity('GT')\n     * # '>'\n     * $ lookupEntity('amp')\n     * # '&'\n     * $ lookupEntity('nbsp')\n     * # '\\xA0'\n     * $ lookupEntity('apos')\n     * # \"'\"\n     * $ lookupEntity('quot')\n     * # '\"'\n     * $ lookupEntity('#xa')\n     * # '\\n'\n     * $ lookupEntity('#10')\n     * # '\\n'\n     * $ lookupEntity('#x0a')\n     * # '\\n'\n     * $ lookupEntity('#010')\n     * # '\\n'\n     * $ lookupEntity('#x00A')\n     * # '\\n'\n     * $ lookupEntity('Pi')      // Known failure\n     * # '\\u03A0'\n     * $ lookupEntity('pi')      // Known failure\n     * # '\\u03C0'\n     * }\n     *\n     * @param {string} name the content between the '&' and the ';'.\n     * @return {string} a single unicode code-point as a string.\n     */\n    function lookupEntity(name) {\n        // TODO: entity lookup as specified by HTML5 actually depends on the\n        // presence of the \";\".\n        if (ENTITIES.hasOwnProperty(name)) { return ENTITIES[name]; }\n        var m = name.match(decimalEscapeRe);\n        if (m) {\n            return String.fromCharCode(parseInt(m[1], 10));\n        } else if (!!(m = name.match(hexEscapeRe))) {\n            return String.fromCharCode(parseInt(m[1], 16));\n        } else if (entityLookupElement && safeEntityNameRe.test(name)) {\n            entityLookupElement.innerHTML = '&' + name + ';';\n            var text = entityLookupElement.textContent;\n            ENTITIES[name] = text;\n            return text;\n        } else {\n            return '&' + name + ';';\n        }\n    }\n\n    function decodeOneEntity(_, name) {\n        return lookupEntity(name);\n    }\n\n    var nulRe = /\\0/g;\n    function stripNULs(s) {\n        return s.replace(nulRe, '');\n    }\n\n    var ENTITY_RE_1 = /&(#[0-9]+|#[xX][0-9A-Fa-f]+|\\w+);/g;\n    var ENTITY_RE_2 = /^(#[0-9]+|#[xX][0-9A-Fa-f]+|\\w+);/;\n    /**\n     * The plain text of a chunk of HTML CDATA which possibly containing.\n     *\n     * {\\@updoc\n     * $ unescapeEntities('')\n     * # ''\n     * $ unescapeEntities('hello World!')\n     * # 'hello World!'\n     * $ unescapeEntities('1 &lt; 2 &amp;&AMP; 4 &gt; 3&#10;')\n     * # '1 < 2 && 4 > 3\\n'\n     * $ unescapeEntities('&lt;&lt <- unfinished entity&gt;')\n     * # '<&lt <- unfinished entity>'\n     * $ unescapeEntities('/foo?bar=baz&copy=true')  // & often unescaped in URLS\n     * # '/foo?bar=baz&copy=true'\n     * $ unescapeEntities('pi=&pi;&#x3c0;, Pi=&Pi;\\u03A0') // FIXME: known failure\n     * # 'pi=\\u03C0\\u03c0, Pi=\\u03A0\\u03A0'\n     * }\n     *\n     * @param {string} s a chunk of HTML CDATA.  It must not start or end inside\n     *     an HTML entity.\n     */\n    function unescapeEntities(s) {\n\tif(s) {\n\t    return s.replace(ENTITY_RE_1, decodeOneEntity);\n\t}\n\telse {\n\t    return s;\n\t}\n    }\n\n    var ampRe = /&/g;\n    var looseAmpRe = /&([^a-z#]|#(?:[^0-9x]|x(?:[^0-9a-f]|$)|$)|$)/gi;\n    var ltRe = /[<]/g;\n    var gtRe = />/g;\n    var quotRe = /\\\"/g;\n\n    /**\n     * Escapes HTML special characters in attribute values.\n     *\n     * {\\@updoc\n     * $ escapeAttrib('')\n     * # ''\n     * $ escapeAttrib('\"<<&==&>>\"')  // Do not just escape the first occurrence.\n     * # '&#34;&lt;&lt;&amp;&#61;&#61;&amp;&gt;&gt;&#34;'\n     * $ escapeAttrib('Hello <World>!')\n     * # 'Hello &lt;World&gt;!'\n     * }\n     */\n    function escapeAttrib(s) {\n\tif(s) {\n\t    return ('' + s).replace(ampRe, '&amp;').replace(ltRe, '&lt;')\n            .replace(gtRe, '&gt;').replace(quotRe, '&#34;');\n\t}\n\telse {\n\t    return s;\n\t}\n        \n    }\n\n    /**\n     * Escape entities in RCDATA that can be escaped without changing the meaning.\n     * {\\@updoc\n     * $ normalizeRCData('1 < 2 &&amp; 3 > 4 &amp;& 5 &lt; 7&8')\n     * # '1 &lt; 2 &amp;&amp; 3 &gt; 4 &amp;&amp; 5 &lt; 7&amp;8'\n     * }\n     */\n    function normalizeRCData(rcdata) {\n\tif(rcdata) {\n\t    return rcdata\n                .replace(looseAmpRe, '&amp;$1')\n                .replace(ltRe, '&lt;')\n                .replace(gtRe, '&gt;');\n\t}\n\telse {\n\t    return rcdata;\n\t}\n    }\n\n    // TODO(felix8a): validate sanitizer regexs against the HTML5 grammar at\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html\n\n    // We initially split input so that potentially meaningful characters\n    // like '<' and '>' are separate tokens, using a fast dumb process that\n    // ignores quoting.  Then we walk that token stream, and when we see a\n    // '<' that's the start of a tag, we use ATTR_RE to extract tag\n    // attributes from the next token.  That token will never have a '>'\n    // character.  However, it might have an unbalanced quote character, and\n    // when we see that, we combine additional tokens to balance the quote.\n\n    var ATTR_RE = new RegExp(\n        '^\\\\s*' +\n            '([-.:\\\\w]+)' +             // 1 = Attribute name\n            '(?:' + (\n            '\\\\s*(=)\\\\s*' +           // 2 = Is there a value?\n                '(' + (                   // 3 = Attribute value\n                // TODO(felix8a): maybe use backref to match quotes\n                '(\\\")[^\\\"]*(\\\"|$)' +    // 4, 5 = Double-quoted string\n                    '|' +\n                    '(\\')[^\\']*(\\'|$)' +    // 6, 7 = Single-quoted string\n                    '|' +\n                    // Positive lookahead to prevent interpretation of\n                    // <foo a= b=c> as <foo a='b=c'>\n                    // TODO(felix8a): might be able to drop this case\n                    '(?=[a-z][-\\\\w]*\\\\s*=)' +\n                    '|' +\n                    // Unquoted value that isn't an attribute name\n                    // (since we didn't match the positive lookahead above)\n                    '[^\\\"\\'\\\\s]*' ) +\n                ')' ) +\n            ')?',\n        'i');\n\n    // false on IE<=8, true on most other browsers\n    var splitWillCapture = ('a,b'.split(/(,)/).length === 3);\n\n    // bitmask for tags with special parsing, like <script> and <textarea>\n    var EFLAGS_TEXT = html4.eflags['CDATA'] | html4.eflags['RCDATA'];\n\n    /**\n     * Given a SAX-like event handler, produce a function that feeds those\n     * events and a parameter to the event handler.\n     *\n     * The event handler has the form:{@code\n     * {\n   *   // Name is an upper-case HTML tag name.  Attribs is an array of\n   *   // alternating upper-case attribute names, and attribute values.  The\n   *   // attribs array is reused by the parser.  Param is the value passed to\n   *   // the saxParser.\n   *   startTag: function (name, attribs, param) { ... },\n   *   endTag:   function (name, param) { ... },\n   *   pcdata:   function (text, param) { ... },\n   *   rcdata:   function (text, param) { ... },\n   *   cdata:    function (text, param) { ... },\n   *   startDoc: function (param) { ... },\n   *   endDoc:   function (param) { ... }\n   * }}\n     *\n     * @param {Object} handler a record containing event handlers.\n     * @return {function(string, Object)} A function that takes a chunk of HTML\n     *     and a parameter.  The parameter is passed on to the handler methods.\n     */\n    function makeSaxParser(handler) {\n        // Accept quoted or unquoted keys (Closure compat)\n        var hcopy = {\n            cdata: handler.cdata || handler['cdata'],\n            comment: handler.comment || handler['comment'],\n            endDoc: handler.endDoc || handler['endDoc'],\n            endTag: handler.endTag || handler['endTag'],\n            pcdata: handler.pcdata || handler['pcdata'],\n            rcdata: handler.rcdata || handler['rcdata'],\n            startDoc: handler.startDoc || handler['startDoc'],\n            startTag: handler.startTag || handler['startTag']\n        };\n        return function(htmlText, param) {\n            return parse(htmlText, hcopy, param);\n        };\n    }\n\n    // Parsing strategy is to split input into parts that might be lexically\n    // meaningful (every \">\" becomes a separate part), and then recombine\n    // parts if we discover they're in a different context.\n\n    // TODO(felix8a): Significant performance regressions from -legacy,\n    // tested on\n    //    Chrome 18.0\n    //    Firefox 11.0\n    //    IE 6, 7, 8, 9\n    //    Opera 11.61\n    //    Safari 5.1.3\n    // Many of these are unusual patterns that are linearly slower and still\n    // pretty fast (eg 1ms to 5ms), so not necessarily worth fixing.\n\n    // TODO(felix8a): \"<script> && && && ... <\\/script>\" is slower on all\n    // browsers.  The hotspot is htmlSplit.\n\n    // TODO(felix8a): \"<p title='>>>>...'><\\/p>\" is slower on all browsers.\n    // This is partly htmlSplit, but the hotspot is parseTagAndAttrs.\n\n    // TODO(felix8a): \"<a><\\/a><a><\\/a>...\" is slower on IE9.\n    // \"<a>1<\\/a><a>1<\\/a>...\" is faster, \"<a><\\/a>2<a><\\/a>2...\" is faster.\n\n    // TODO(felix8a): \"<p<p<p...\" is slower on IE[6-8]\n\n    var continuationMarker = {};\n    function parse(htmlText, handler, param) {\n        var m, p, tagName;\n        var parts = htmlSplit(htmlText);\n        var state = {\n            noMoreGT: false,\n            noMoreEndComments: false\n        };\n        parseCPS(handler, parts, 0, state, param);\n    }\n\n    function continuationMaker(h, parts, initial, state, param) {\n        return function () {\n            parseCPS(h, parts, initial, state, param);\n        };\n    }\n\n    function parseCPS(h, parts, initial, state, param) {\n        try {\n            if (h.startDoc && initial == 0) { h.startDoc(param); }\n            var m, p, tagName;\n            for (var pos = initial, end = parts.length; pos < end;) {\n                var current = parts[pos++];\n                var next = parts[pos];\n                switch (current) {\n                    case '&':\n                        if (ENTITY_RE_2.test(next)) {\n                            if (h.pcdata) {\n                                h.pcdata('&' + next, param, continuationMarker,\n                                    continuationMaker(h, parts, pos, state, param));\n                            }\n                            pos++;\n                        } else {\n                            if (h.pcdata) { h.pcdata(\"&amp;\", param, continuationMarker,\n                                continuationMaker(h, parts, pos, state, param));\n                            }\n                        }\n                        break;\n                    case '<\\/':\n                        if ((m = /^([-\\w:]+)[^\\'\\\"]*/.exec(next))) {\n                            if (m[0].length === next.length && parts[pos + 1] === '>') {\n                                // fast case, no attribute parsing needed\n                                pos += 2;\n                                tagName = m[1].toLowerCase();\n                                if (h.endTag) {\n                                    h.endTag(tagName, param, continuationMarker,\n                                        continuationMaker(h, parts, pos, state, param));\n                                }\n                            } else {\n                                // slow case, need to parse attributes\n                                // TODO(felix8a): do we really care about misparsing this?\n                                pos = parseEndTag(\n                                    parts, pos, h, param, continuationMarker, state);\n                            }\n                        } else {\n                            if (h.pcdata) {\n                                h.pcdata('&lt;/', param, continuationMarker,\n                                    continuationMaker(h, parts, pos, state, param));\n                            }\n                        }\n                        break;\n                    case '<':\n                        if (m = /^([-\\w:]+)\\s*\\/?/.exec(next)) {\n                            if (m[0].length === next.length && parts[pos + 1] === '>') {\n                                // fast case, no attribute parsing needed\n                                pos += 2;\n                                tagName = m[1].toLowerCase();\n                                if (h.startTag) {\n                                    h.startTag(tagName, [], param, continuationMarker,\n                                        continuationMaker(h, parts, pos, state, param));\n                                }\n                                // tags like <script> and <textarea> have special parsing\n                                var eflags = html4.ELEMENTS[tagName];\n                                if (eflags & EFLAGS_TEXT) {\n                                    var tag = { name: tagName, next: pos, eflags: eflags };\n                                    pos = parseText(\n                                        parts, tag, h, param, continuationMarker, state);\n                                }\n                            } else {\n                                // slow case, need to parse attributes\n                                pos = parseStartTag(\n                                    parts, pos, h, param, continuationMarker, state);\n                            }\n                        } else {\n                            if (h.pcdata) {\n                                h.pcdata('&lt;', param, continuationMarker,\n                                    continuationMaker(h, parts, pos, state, param));\n                            }\n                        }\n                        break;\n                    case '<\\!--':\n                        // The pathological case is n copies of '<\\!--' without '-->', and\n                        // repeated failure to find '-->' is quadratic.  We avoid that by\n                        // remembering when search for '-->' fails.\n                        if (!state.noMoreEndComments) {\n                            // A comment <\\!--x--> is split into three tokens:\n                            //   '<\\!--', 'x--', '>'\n                            // We want to find the next '>' token that has a preceding '--'.\n                            // pos is at the 'x--'.\n                            for (p = pos + 1; p < end; p++) {\n                                if (parts[p] === '>' && /--$/.test(parts[p - 1])) { break; }\n                            }\n                            if (p < end) {\n                                if (h.comment) {\n                                    var comment = parts.slice(pos, p).join('');\n                                    h.comment(\n                                        comment.substr(0, comment.length - 2), param,\n                                        continuationMarker,\n                                        continuationMaker(h, parts, p + 1, state, param));\n                                }\n                                pos = p + 1;\n                            } else {\n                                state.noMoreEndComments = true;\n                            }\n                        }\n                        if (state.noMoreEndComments) {\n                            if (h.pcdata) {\n                                h.pcdata('&lt;!--', param, continuationMarker,\n                                    continuationMaker(h, parts, pos, state, param));\n                            }\n                        }\n                        break;\n                    case '<\\!':\n                        if (!/^\\w/.test(next)) {\n                            if (h.pcdata) {\n                                h.pcdata('&lt;!', param, continuationMarker,\n                                    continuationMaker(h, parts, pos, state, param));\n                            }\n                        } else {\n                            // similar to noMoreEndComment logic\n                            if (!state.noMoreGT) {\n                                for (p = pos + 1; p < end; p++) {\n                                    if (parts[p] === '>') { break; }\n                                }\n                                if (p < end) {\n                                    pos = p + 1;\n                                } else {\n                                    state.noMoreGT = true;\n                                }\n                            }\n                            if (state.noMoreGT) {\n                                if (h.pcdata) {\n                                    h.pcdata('&lt;!', param, continuationMarker,\n                                        continuationMaker(h, parts, pos, state, param));\n                                }\n                            }\n                        }\n                        break;\n                    case '<?':\n                        // similar to noMoreEndComment logic\n                        if (!state.noMoreGT) {\n                            for (p = pos + 1; p < end; p++) {\n                                if (parts[p] === '>') { break; }\n                            }\n                            if (p < end) {\n                                pos = p + 1;\n                            } else {\n                                state.noMoreGT = true;\n                            }\n                        }\n                        if (state.noMoreGT) {\n                            if (h.pcdata) {\n                                h.pcdata('&lt;?', param, continuationMarker,\n                                    continuationMaker(h, parts, pos, state, param));\n                            }\n                        }\n                        break;\n                    case '>':\n                        if (h.pcdata) {\n                            h.pcdata(\"&gt;\", param, continuationMarker,\n                                continuationMaker(h, parts, pos, state, param));\n                        }\n                        break;\n                    case '':\n                        break;\n                    default:\n                        if (h.pcdata) {\n                            h.pcdata(current, param, continuationMarker,\n                                continuationMaker(h, parts, pos, state, param));\n                        }\n                        break;\n                }\n            }\n            if (h.endDoc) { h.endDoc(param); }\n        } catch (e) {\n            if (e !== continuationMarker) { throw e; }\n        }\n    }\n\n    // Split str into parts for the html parser.\n    function htmlSplit(str) {\n        // can't hoist this out of the function because of the re.exec loop.\n        var re = /(<\\/|<\\!--|<[!?]|[&<>])/g;\n        str += '';\n        if (splitWillCapture) {\n            return str.split(re);\n        } else {\n            var parts = [];\n            var lastPos = 0;\n            var m;\n            while ((m = re.exec(str)) !== null) {\n                parts.push(str.substring(lastPos, m.index));\n                parts.push(m[0]);\n                lastPos = m.index + m[0].length;\n            }\n            parts.push(str.substring(lastPos));\n            return parts;\n        }\n    }\n\n    function parseEndTag(parts, pos, h, param, continuationMarker, state) {\n        var tag = parseTagAndAttrs(parts, pos);\n        // drop unclosed tags\n        if (!tag) { return parts.length; }\n        if (h.endTag) {\n            h.endTag(tag.name, param, continuationMarker,\n                continuationMaker(h, parts, pos, state, param));\n        }\n        return tag.next;\n    }\n\n    function parseStartTag(parts, pos, h, param, continuationMarker, state) {\n        var tag = parseTagAndAttrs(parts, pos);\n        // drop unclosed tags\n        if (!tag) { return parts.length; }\n        if (h.startTag) {\n            h.startTag(tag.name, tag.attrs, param, continuationMarker,\n                continuationMaker(h, parts, tag.next, state, param));\n        }\n        // tags like <script> and <textarea> have special parsing\n        if (tag.eflags & EFLAGS_TEXT) {\n            return parseText(parts, tag, h, param, continuationMarker, state);\n        } else {\n            return tag.next;\n        }\n    }\n\n    var endTagRe = {};\n\n    // Tags like <script> and <textarea> are flagged as CDATA or RCDATA,\n    // which means everything is text until we see the correct closing tag.\n    function parseText(parts, tag, h, param, continuationMarker, state) {\n        var end = parts.length;\n        if (!endTagRe.hasOwnProperty(tag.name)) {\n            endTagRe[tag.name] = new RegExp('^' + tag.name + '(?:[\\\\s\\\\/]|$)', 'i');\n        }\n        var re = endTagRe[tag.name];\n        var first = tag.next;\n        var p = tag.next + 1;\n        for (; p < end; p++) {\n            if (parts[p - 1] === '<\\/' && re.test(parts[p])) { break; }\n        }\n        if (p < end) { p -= 1; }\n        var buf = parts.slice(first, p).join('');\n        if (tag.eflags & html4.eflags['CDATA']) {\n            if (h.cdata) {\n                h.cdata(buf, param, continuationMarker,\n                    continuationMaker(h, parts, p, state, param));\n            }\n        } else if (tag.eflags & html4.eflags['RCDATA']) {\n            if (h.rcdata) {\n                h.rcdata(normalizeRCData(buf), param, continuationMarker,\n                    continuationMaker(h, parts, p, state, param));\n            }\n        } else {\n            throw new Error('bug');\n        }\n        return p;\n    }\n\n    // at this point, parts[pos-1] is either \"<\" or \"<\\/\".\n    function parseTagAndAttrs(parts, pos) {\n        var m = /^([-\\w:]+)/.exec(parts[pos]);\n        var tag = {};\n        tag.name = m[1].toLowerCase();\n        tag.eflags = html4.ELEMENTS[tag.name];\n        var buf = parts[pos].substr(m[0].length);\n        // Find the next '>'.  We optimistically assume this '>' is not in a\n        // quoted context, and further down we fix things up if it turns out to\n        // be quoted.\n        var p = pos + 1;\n        var end = parts.length;\n        for (; p < end; p++) {\n            if (parts[p] === '>') { break; }\n            buf += parts[p];\n        }\n        if (end <= p) { return void 0; }\n        var attrs = [];\n        while (buf !== '') {\n            m = ATTR_RE.exec(buf);\n            if (!m) {\n                // No attribute found: skip garbage\n                buf = buf.replace(/^[\\s\\S][^a-z\\s]*/, '');\n\n            } else if ((m[4] && !m[5]) || (m[6] && !m[7])) {\n                // Unterminated quote: slurp to the next unquoted '>'\n                var quote = m[4] || m[6];\n                var sawQuote = false;\n                var abuf = [buf, parts[p++]];\n                for (; p < end; p++) {\n                    if (sawQuote) {\n                        if (parts[p] === '>') { break; }\n                    } else if (0 <= parts[p].indexOf(quote)) {\n                        sawQuote = true;\n                    }\n                    abuf.push(parts[p]);\n                }\n                // Slurp failed: lose the garbage\n                if (end <= p) { break; }\n                // Otherwise retry attribute parsing\n                buf = abuf.join('');\n                continue;\n\n            } else {\n                // We have an attribute\n                var aName = m[1].toLowerCase();\n                var aValue = m[2] ? decodeValue(m[3]) : '';\n                attrs.push(aName, aValue);\n                buf = buf.substr(m[0].length);\n            }\n        }\n        tag.attrs = attrs;\n        tag.next = p + 1;\n        return tag;\n    }\n\n    function decodeValue(v) {\n        var q = v.charCodeAt(0);\n        if (q === 0x22 || q === 0x27) { // \" or '\n            v = v.substr(1, v.length - 2);\n        }\n        return unescapeEntities(stripNULs(v));\n    }\n\n    /**\n     * Returns a function that strips unsafe tags and attributes from html.\n     * @param {function(string, Array.<string>): ?Array.<string>} tagPolicy\n     *     A function that takes (tagName, attribs[]), where tagName is a key in\n     *     html4.ELEMENTS and attribs is an array of alternating attribute names\n     *     and values.  It should return a record (as follows), or null to delete\n     *     the element.  It's okay for tagPolicy to modify the attribs array,\n     *     but the same array is reused, so it should not be held between calls.\n     *     Record keys:\n     *        attribs: (required) Sanitized attributes array.\n     *        tagName: Replacement tag name.\n     * @return {function(string, Array)} A function that sanitizes a string of\n     *     HTML and appends result strings to the second argument, an array.\n     */\n    function makeHtmlSanitizer(tagPolicy) {\n        var stack;\n        var ignoring;\n        var emit = function (text, out) {\n            if (!ignoring) { out.push(text); }\n        };\n        return makeSaxParser({\n            'startDoc': function(_) {\n                stack = [];\n                ignoring = false;\n            },\n            'startTag': function(tagNameOrig, attribs, out) {\n                if (ignoring) { return; }\n                if (!html4.ELEMENTS.hasOwnProperty(tagNameOrig)) { return; }\n                var eflagsOrig = html4.ELEMENTS[tagNameOrig];\n                if (eflagsOrig & html4.eflags['FOLDABLE']) {\n                    return;\n                }\n\n                var decision = tagPolicy(tagNameOrig, attribs);\n                if (!decision) {\n                    ignoring = !(eflagsOrig & html4.eflags['EMPTY']);\n                    return;\n                } else if (typeof decision !== 'object') {\n                    throw new Error('tagPolicy did not return object (old API?)');\n                }\n                if ('attribs' in decision) {\n                    attribs = decision['attribs'];\n                } else {\n                    throw new Error('tagPolicy gave no attribs');\n                }\n                var eflagsRep;\n                var tagNameRep;\n                if ('tagName' in decision) {\n                    tagNameRep = decision['tagName'];\n                    eflagsRep = html4.ELEMENTS[tagNameRep];\n                } else {\n                    tagNameRep = tagNameOrig;\n                    eflagsRep = eflagsOrig;\n                }\n                // TODO(mikesamuel): relying on tagPolicy not to insert unsafe\n                // attribute names.\n\n                // If this is an optional-end-tag element and either this element or its\n                // previous like sibling was rewritten, then insert a close tag to\n                // preserve structure.\n                if (eflagsOrig & html4.eflags['OPTIONAL_ENDTAG']) {\n                    var onStack = stack[stack.length - 1];\n                    if (onStack && onStack.orig === tagNameOrig &&\n                        (onStack.rep !== tagNameRep || tagNameOrig !== tagNameRep)) {\n                        out.push('<\\/', onStack.rep, '>');\n                    }\n                }\n\n                if (!(eflagsOrig & html4.eflags['EMPTY'])) {\n                    stack.push({orig: tagNameOrig, rep: tagNameRep});\n                }\n\n                out.push('<', tagNameRep);\n                for (var i = 0, n = attribs.length; i < n; i += 2) {\n                    var attribName = attribs[i],\n                        value = attribs[i + 1];\n                    if (value !== null && value !== void 0) {\n                        out.push(' ', attribName, '=\"', escapeAttrib(value), '\"');\n                    }\n                }\n                out.push('>');\n\n                if ((eflagsOrig & html4.eflags['EMPTY'])\n                    && !(eflagsRep & html4.eflags['EMPTY'])) {\n                    // replacement is non-empty, synthesize end tag\n                    out.push('<\\/', tagNameRep, '>');\n                }\n            },\n            'endTag': function(tagName, out) {\n                if (ignoring) {\n                    ignoring = false;\n                    return;\n                }\n                if (!html4.ELEMENTS.hasOwnProperty(tagName)) { return; }\n                var eflags = html4.ELEMENTS[tagName];\n                if (!(eflags & (html4.eflags['EMPTY'] | html4.eflags['FOLDABLE']))) {\n                    var index;\n                    if (eflags & html4.eflags['OPTIONAL_ENDTAG']) {\n                        for (index = stack.length; --index >= 0;) {\n                            var stackElOrigTag = stack[index].orig;\n                            if (stackElOrigTag === tagName) { break; }\n                            if (!(html4.ELEMENTS[stackElOrigTag] &\n                                html4.eflags['OPTIONAL_ENDTAG'])) {\n                                // Don't pop non optional end tags looking for a match.\n                                return;\n                            }\n                        }\n                    } else {\n                        for (index = stack.length; --index >= 0;) {\n                            if (stack[index].orig === tagName) { break; }\n                        }\n                    }\n                    if (index < 0) { return; }  // Not opened.\n                    for (var i = stack.length; --i > index;) {\n                        var stackElRepTag = stack[i].rep;\n                        if (!(html4.ELEMENTS[stackElRepTag] &\n                            html4.eflags['OPTIONAL_ENDTAG'])) {\n                            out.push('<\\/', stackElRepTag, '>');\n                        }\n                    }\n                    if (index < stack.length) {\n                        tagName = stack[index].rep;\n                    }\n                    stack.length = index;\n                    out.push('<\\/', tagName, '>');\n                }\n            },\n            'pcdata': emit,\n            'rcdata': emit,\n            'cdata': emit,\n            'endDoc': function(out) {\n                for (; stack.length; stack.length--) {\n                    out.push('<\\/', stack[stack.length - 1].rep, '>');\n                }\n            }\n        });\n    }\n\n    var ALLOWED_URI_SCHEMES = /^(?:https?|mailto)$/i;\n\n    function safeUri(uri, effect, ltype, hints, naiveUriRewriter) {\n        if (!naiveUriRewriter) { return null; }\n        try {\n            var parsed = URI.parse('' + uri);\n            if (parsed) {\n                if (!parsed.hasScheme() ||\n                    ALLOWED_URI_SCHEMES.test(parsed.getScheme())) {\n                    var safe = naiveUriRewriter(parsed, effect, ltype, hints);\n                    return safe ? safe.toString() : null;\n                }\n            }\n        } catch (e) {\n            return null;\n        }\n        return null;\n    }\n\n    function log(logger, tagName, attribName, oldValue, newValue) {\n        if (!attribName) {\n            logger(tagName + \" removed\", {\n                change: \"removed\",\n                tagName: tagName\n            });\n        }\n        if (oldValue !== newValue) {\n            var changed = \"changed\";\n            if (oldValue && !newValue) {\n                changed = \"removed\";\n            } else if (!oldValue && newValue)  {\n                changed = \"added\";\n            }\n            logger(tagName + \".\" + attribName + \" \" + changed, {\n                change: changed,\n                tagName: tagName,\n                attribName: attribName,\n                oldValue: oldValue,\n                newValue: newValue\n            });\n        }\n    }\n\n    function lookupAttribute(map, tagName, attribName) {\n        var attribKey;\n        attribKey = tagName + '::' + attribName;\n        if (map.hasOwnProperty(attribKey)) {\n            return map[attribKey];\n        }\n        attribKey = '*::' + attribName;\n        if (map.hasOwnProperty(attribKey)) {\n            return map[attribKey];\n        }\n        return void 0;\n    }\n    function getAttributeType(tagName, attribName) {\n        return lookupAttribute(html4.ATTRIBS, tagName, attribName);\n    }\n    function getLoaderType(tagName, attribName) {\n        return lookupAttribute(html4.LOADERTYPES, tagName, attribName);\n    }\n    function getUriEffect(tagName, attribName) {\n        return lookupAttribute(html4.URIEFFECTS, tagName, attribName);\n    }\n\n    /**\n     * Sanitizes attributes on an HTML tag.\n     * @param {string} tagName An HTML tag name in lowercase.\n     * @param {Array.<?string>} attribs An array of alternating names and values.\n     * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to\n     *     apply to URI attributes; it can return a new string value, or null to\n     *     delete the attribute.  If unspecified, URI attributes are deleted.\n     * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply\n     *     to attributes containing HTML names, element IDs, and space-separated\n     *     lists of classes; it can return a new string value, or null to delete\n     *     the attribute.  If unspecified, these attributes are kept unchanged.\n     * @return {Array.<?string>} The sanitized attributes as a list of alternating\n     *     names and values, where a null value means to omit the attribute.\n     */\n    function sanitizeAttribs(tagName, attribs,\n        opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {\n        // TODO(felix8a): it's obnoxious that domado duplicates much of this\n        // TODO(felix8a): maybe consistently enforce constraints like target=\n        for (var i = 0; i < attribs.length; i += 2) {\n            var attribName = attribs[i];\n            var value = attribs[i + 1];\n            var oldValue = value;\n            var atype = null, attribKey;\n            if ((attribKey = tagName + '::' + attribName,\n                html4.ATTRIBS.hasOwnProperty(attribKey)) ||\n                (attribKey = '*::' + attribName,\n                    html4.ATTRIBS.hasOwnProperty(attribKey))) {\n                atype = html4.ATTRIBS[attribKey];\n            }\n            if (atype !== null) {\n                switch (atype) {\n                    case html4.atype['NONE']: break;\n                    case html4.atype['SCRIPT']:\n                        value = null;\n                        if (opt_logger) {\n                            log(opt_logger, tagName, attribName, oldValue, value);\n                        }\n                        break;\n                    case html4.atype['STYLE']:\n                        if ('undefined' === typeof parseCssDeclarations) {\n                            value = null;\n                            if (opt_logger) {\n                                log(opt_logger, tagName, attribName, oldValue, value);\n                            }\n                            break;\n                        }\n                        var sanitizedDeclarations = [];\n                        parseCssDeclarations(\n                            value,\n                            {\n                                'declaration': function (property, tokens) {\n                                    var normProp = property.toLowerCase();\n                                    sanitizeCssProperty(\n                                        normProp, tokens,\n                                        opt_naiveUriRewriter\n                                            ? function (url) {\n                                            return safeUri(\n                                                url, html4.ueffects.SAME_DOCUMENT,\n                                                html4.ltypes.SANDBOXED,\n                                                {\n                                                    \"TYPE\": \"CSS\",\n                                                    \"CSS_PROP\": normProp\n                                                }, opt_naiveUriRewriter);\n                                        }\n                                            : null);\n                                    if (tokens.length) {\n                                        sanitizedDeclarations.push(\n                                            normProp + ': ' + tokens.join(' '));\n                                    }\n                                }\n                            });\n                        value = sanitizedDeclarations.length > 0 ?\n                            sanitizedDeclarations.join(' ; ') : null;\n                        if (opt_logger) {\n                            log(opt_logger, tagName, attribName, oldValue, value);\n                        }\n                        break;\n                    case html4.atype['ID']:\n                    case html4.atype['IDREF']:\n                    case html4.atype['IDREFS']:\n                    case html4.atype['GLOBAL_NAME']:\n                    case html4.atype['LOCAL_NAME']:\n                    case html4.atype['CLASSES']:\n                        value = opt_nmTokenPolicy ? opt_nmTokenPolicy(value) : value;\n                        if (opt_logger) {\n                            log(opt_logger, tagName, attribName, oldValue, value);\n                        }\n                        break;\n                    case html4.atype['URI']:\n                        value = safeUri(value,\n                            getUriEffect(tagName, attribName),\n                            getLoaderType(tagName, attribName),\n                            {\n                                \"TYPE\": \"MARKUP\",\n                                \"XML_ATTR\": attribName,\n                                \"XML_TAG\": tagName\n                            }, opt_naiveUriRewriter);\n                        if (opt_logger) {\n                            log(opt_logger, tagName, attribName, oldValue, value);\n                        }\n                        break;\n                    case html4.atype['URI_FRAGMENT']:\n                        if (value && '#' === value.charAt(0)) {\n                            value = value.substring(1);  // remove the leading '#'\n                            value = opt_nmTokenPolicy ? opt_nmTokenPolicy(value) : value;\n                            if (value !== null && value !== void 0) {\n                                value = '#' + value;  // restore the leading '#'\n                            }\n                        } else {\n                            value = null;\n                        }\n                        if (opt_logger) {\n                            log(opt_logger, tagName, attribName, oldValue, value);\n                        }\n                        break;\n                    default:\n                        value = null;\n                        if (opt_logger) {\n                            log(opt_logger, tagName, attribName, oldValue, value);\n                        }\n                        break;\n                }\n            } else {\n                value = null;\n                if (opt_logger) {\n                    log(opt_logger, tagName, attribName, oldValue, value);\n                }\n            }\n            attribs[i + 1] = value;\n        }\n        return attribs;\n    }\n\n    /**\n     * Creates a tag policy that omits all tags marked UNSAFE in html4-defs.js\n     * and applies the default attribute sanitizer with the supplied policy for\n     * URI attributes and NMTOKEN attributes.\n     * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to\n     *     apply to URI attributes.  If not given, URI attributes are deleted.\n     * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply\n     *     to attributes containing HTML names, element IDs, and space-separated\n     *     lists of classes.  If not given, such attributes are left unchanged.\n     * @return {function(string, Array.<?string>)} A tagPolicy suitable for\n     *     passing to html.sanitize.\n     */\n    function makeTagPolicy(\n        opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {\n        return function(tagName, attribs) {\n            if (!(html4.ELEMENTS[tagName] & html4.eflags['UNSAFE'])) {\n                return {\n                    'attribs': sanitizeAttribs(tagName, attribs,\n                        opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger)\n                };\n            } else {\n                if (opt_logger) {\n                    log(opt_logger, tagName, undefined, undefined, undefined);\n                }\n            }\n        };\n    }\n\n    /**\n     * Sanitizes HTML tags and attributes according to a given policy.\n     * @param {string} inputHtml The HTML to sanitize.\n     * @param {function(string, Array.<?string>)} tagPolicy A function that\n     *     decides which tags to accept and sanitizes their attributes (see\n     *     makeHtmlSanitizer above for details).\n     * @return {string} The sanitized HTML.\n     */\n    function sanitizeWithPolicy(inputHtml, tagPolicy) {\n        var outputArray = [];\n        makeHtmlSanitizer(tagPolicy)(inputHtml, outputArray);\n        return outputArray.join('');\n    }\n\n    /**\n     * Strips unsafe tags and attributes from HTML.\n     * @param {string} inputHtml The HTML to sanitize.\n     * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to\n     *     apply to URI attributes.  If not given, URI attributes are deleted.\n     * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply\n     *     to attributes containing HTML names, element IDs, and space-separated\n     *     lists of classes.  If not given, such attributes are left unchanged.\n     */\n    function sanitize(inputHtml,\n        opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {\n        var tagPolicy = makeTagPolicy(\n            opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger);\n        return sanitizeWithPolicy(inputHtml, tagPolicy);\n    }\n\n    // Export both quoted and unquoted names for Closure linkage.\n    var html = {};\n    html.escapeAttrib = html['escapeAttrib'] = escapeAttrib;\n    html.makeHtmlSanitizer = html['makeHtmlSanitizer'] = makeHtmlSanitizer;\n    html.makeSaxParser = html['makeSaxParser'] = makeSaxParser;\n    html.makeTagPolicy = html['makeTagPolicy'] = makeTagPolicy;\n    html.normalizeRCData = html['normalizeRCData'] = normalizeRCData;\n    html.sanitize = html['sanitize'] = sanitize;\n    html.sanitizeAttribs = html['sanitizeAttribs'] = sanitizeAttribs;\n    html.sanitizeWithPolicy = html['sanitizeWithPolicy'] = sanitizeWithPolicy;\n    html.unescapeEntities = html['unescapeEntities'] = unescapeEntities;\n    return html;\n})(html4);\n\nvar html_sanitize = html['sanitize'];\n\n// Exports for Closure compiler.  Note this file is also cajoled\n// for domado and run in an environment without 'window'\nif (typeof window !== 'undefined') {\n    window['html'] = html;\n    window['html_sanitize'] = html_sanitize;\n}\n\nvar Sanitizer = {};\n\n// Ensure backwards compatibility\nSanitizer.escapeAttrib = html.escapeAttrib;\nSanitizer.makeHtmlSanitizer = html.makeHtmlSanitizer;\nSanitizer.makeSaxParser = html.makeSaxParser;\nSanitizer.makeTagPolicy = html.makeTagPolicy;\nSanitizer.normalizeRCData = html.normalizeRCData\nSanitizer.sanitizeAttribs = html.sanitizeAttribs\nSanitizer.sanitizeWithPolicy = html.sanitizeWithPolicy\nSanitizer.unescapeEntities = html.unescapeEntities\nSanitizer.escape = html.escapeAttrib;\n\n// https://github.com/theSmaw/Caja-HTML-Sanitizer/issues/8\nSanitizer.sanitize = function(inputHtml, opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {\n    if (typeof(inputHtml) === \"string\") {\n        inputHtml = inputHtml.replace(/<([a-zA-Z]+)([^>]*)\\/>/g, '<$1$2></$1>');\n    }\n    \n    if (inputHtml) {\n        return html.sanitize(inputHtml, opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger);\n    }\n    else {\n        return inputHtml;\n    }\n    \n}\n\n// the browser, add 'Sanitizer' as a global object via a string identifier,\n// for Closure Compiler \"advanced\" mode.\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n        exports = module.exports = Sanitizer;\n    }\n    exports.Sanitizer = Sanitizer;\n} else {\n    this.Sanitizer = Sanitizer;\n}\n","/home/travis/build/npmtest/node-npmtest-sanitizer/node_modules/sanitizer/lib/html4.js":"/* Copyright Google Inc.\n * Licensed under the Apache Licence Version 2.0\n * Autogenerated at Fri Aug 13 11:26:55 PDT 2010\n * @provides html4\n */\nvar html4 = {};\nhtml4 .atype = {\n    'NONE': 0,\n    'URI': 1,\n    'URI_FRAGMENT': 11,\n    'SCRIPT': 2,\n    'STYLE': 3,\n    'ID': 4,\n    'IDREF': 5,\n    'IDREFS': 6,\n    'GLOBAL_NAME': 7,\n    'LOCAL_NAME': 8,\n    'CLASSES': 9,\n    'FRAME_TARGET': 10\n};\nhtml4 .ATTRIBS = {\n    '*::class': 9,\n    '*::dir': 0,\n    '*::id': 4,\n    '*::lang': 0,\n    '*::onclick': 2,\n    '*::ondblclick': 2,\n    '*::onkeydown': 2,\n    '*::onkeypress': 2,\n    '*::onkeyup': 2,\n    '*::onload': 2,\n    '*::onmousedown': 2,\n    '*::onmousemove': 2,\n    '*::onmouseout': 2,\n    '*::onmouseover': 2,\n    '*::onmouseup': 2,\n    '*::style': 3,\n    '*::title': 0,\n    'a::accesskey': 0,\n    'a::coords': 0,\n    'a::href': 1,\n    'a::hreflang': 0,\n    'a::name': 7,\n    'a::onblur': 2,\n    'a::onfocus': 2,\n    'a::rel': 0,\n    'a::rev': 0,\n    'a::shape': 0,\n    'a::tabindex': 0,\n    'a::target': 10,\n    'a::type': 0,\n    'area::accesskey': 0,\n    'area::alt': 0,\n    'area::coords': 0,\n    'area::href': 1,\n    'area::nohref': 0,\n    'area::onblur': 2,\n    'area::onfocus': 2,\n    'area::shape': 0,\n    'area::tabindex': 0,\n    'area::target': 10,\n    'bdo::dir': 0,\n    'blockquote::cite': 1,\n    'br::clear': 0,\n    'button::accesskey': 0,\n    'button::disabled': 0,\n    'button::name': 8,\n    'button::onblur': 2,\n    'button::onfocus': 2,\n    'button::tabindex': 0,\n    'button::type': 0,\n    'button::value': 0,\n    'caption::align': 0,\n    'col::align': 0,\n    'col::char': 0,\n    'col::charoff': 0,\n    'col::span': 0,\n    'col::valign': 0,\n    'col::width': 0,\n    'colgroup::align': 0,\n    'colgroup::char': 0,\n    'colgroup::charoff': 0,\n    'colgroup::span': 0,\n    'colgroup::valign': 0,\n    'colgroup::width': 0,\n    'del::cite': 1,\n    'del::datetime': 0,\n    'dir::compact': 0,\n    'div::align': 0,\n    'dl::compact': 0,\n    'font::color': 0,\n    'font::face': 0,\n    'font::size': 0,\n    'form::accept': 0,\n    'form::action': 1,\n    'form::autocomplete': 0,\n    'form::enctype': 0,\n    'form::method': 0,\n    'form::name': 7,\n    'form::onreset': 2,\n    'form::onsubmit': 2,\n    'form::target': 10,\n    'h1::align': 0,\n    'h2::align': 0,\n    'h3::align': 0,\n    'h4::align': 0,\n    'h5::align': 0,\n    'h6::align': 0,\n    'hr::align': 0,\n    'hr::noshade': 0,\n    'hr::size': 0,\n    'hr::width': 0,\n    'iframe::align': 0,\n    'iframe::frameborder': 0,\n    'iframe::height': 0,\n    'iframe::marginheight': 0,\n    'iframe::marginwidth': 0,\n    'iframe::width': 0,\n    'img::align': 0,\n    'img::alt': 0,\n    'img::border': 0,\n    'img::height': 0,\n    'img::hspace': 0,\n    'img::ismap': 0,\n    'img::name': 7,\n    'img::src': 1,\n    'img::usemap': 11,\n    'img::vspace': 0,\n    'img::width': 0,\n    'input::accept': 0,\n    'input::accesskey': 0,\n    'input::align': 0,\n    'input::alt': 0,\n    'input::autocomplete': 0,\n    'input::checked': 0,\n    'input::disabled': 0,\n    'input::ismap': 0,\n    'input::maxlength': 0,\n    'input::name': 8,\n    'input::onblur': 2,\n    'input::onchange': 2,\n    'input::onfocus': 2,\n    'input::onselect': 2,\n    'input::readonly': 0,\n    'input::size': 0,\n    'input::src': 1,\n    'input::tabindex': 0,\n    'input::type': 0,\n    'input::usemap': 11,\n    'input::value': 0,\n    'ins::cite': 1,\n    'ins::datetime': 0,\n    'label::accesskey': 0,\n    'label::for': 5,\n    'label::onblur': 2,\n    'label::onfocus': 2,\n    'legend::accesskey': 0,\n    'legend::align': 0,\n    'li::type': 0,\n    'li::value': 0,\n    'map::name': 7,\n    'menu::compact': 0,\n    'ol::compact': 0,\n    'ol::start': 0,\n    'ol::type': 0,\n    'optgroup::disabled': 0,\n    'optgroup::label': 0,\n    'option::disabled': 0,\n    'option::label': 0,\n    'option::selected': 0,\n    'option::value': 0,\n    'p::align': 0,\n    'pre::width': 0,\n    'q::cite': 1,\n    'select::disabled': 0,\n    'select::multiple': 0,\n    'select::name': 8,\n    'select::onblur': 2,\n    'select::onchange': 2,\n    'select::onfocus': 2,\n    'select::size': 0,\n    'select::tabindex': 0,\n    'table::align': 0,\n    'table::bgcolor': 0,\n    'table::border': 0,\n    'table::cellpadding': 0,\n    'table::cellspacing': 0,\n    'table::frame': 0,\n    'table::rules': 0,\n    'table::summary': 0,\n    'table::width': 0,\n    'tbody::align': 0,\n    'tbody::char': 0,\n    'tbody::charoff': 0,\n    'tbody::valign': 0,\n    'td::abbr': 0,\n    'td::align': 0,\n    'td::axis': 0,\n    'td::bgcolor': 0,\n    'td::char': 0,\n    'td::charoff': 0,\n    'td::colspan': 0,\n    'td::headers': 6,\n    'td::height': 0,\n    'td::nowrap': 0,\n    'td::rowspan': 0,\n    'td::scope': 0,\n    'td::valign': 0,\n    'td::width': 0,\n    'textarea::accesskey': 0,\n    'textarea::cols': 0,\n    'textarea::disabled': 0,\n    'textarea::name': 8,\n    'textarea::onblur': 2,\n    'textarea::onchange': 2,\n    'textarea::onfocus': 2,\n    'textarea::onselect': 2,\n    'textarea::readonly': 0,\n    'textarea::rows': 0,\n    'textarea::tabindex': 0,\n    'tfoot::align': 0,\n    'tfoot::char': 0,\n    'tfoot::charoff': 0,\n    'tfoot::valign': 0,\n    'th::abbr': 0,\n    'th::align': 0,\n    'th::axis': 0,\n    'th::bgcolor': 0,\n    'th::char': 0,\n    'th::charoff': 0,\n    'th::colspan': 0,\n    'th::headers': 6,\n    'th::height': 0,\n    'th::nowrap': 0,\n    'th::rowspan': 0,\n    'th::scope': 0,\n    'th::valign': 0,\n    'th::width': 0,\n    'thead::align': 0,\n    'thead::char': 0,\n    'thead::charoff': 0,\n    'thead::valign': 0,\n    'tr::align': 0,\n    'tr::bgcolor': 0,\n    'tr::char': 0,\n    'tr::charoff': 0,\n    'tr::valign': 0,\n    'ul::compact': 0,\n    'ul::type': 0\n};\nhtml4 .eflags = {\n    'OPTIONAL_ENDTAG': 1,\n    'EMPTY': 2,\n    'CDATA': 4,\n    'RCDATA': 8,\n    'UNSAFE': 16,\n    'FOLDABLE': 32,\n    'SCRIPT': 64,\n    'STYLE': 128\n};\nhtml4 .ELEMENTS = {\n    'a': 0,\n    'abbr': 0,\n    'acronym': 0,\n    'address': 0,\n    'applet': 16,\n    'area': 2,\n    'b': 0,\n    'base': 18,\n    'basefont': 18,\n    'bdo': 0,\n    'big': 0,\n    'blockquote': 0,\n    'body': 49,\n    'br': 2,\n    'button': 0,\n    'caption': 0,\n    'center': 0,\n    'cite': 0,\n    'code': 0,\n    'col': 2,\n    'colgroup': 1,\n    'dd': 1,\n    'del': 0,\n    'dfn': 0,\n    'dir': 0,\n    'div': 0,\n    'dl': 0,\n    'dt': 1,\n    'em': 0,\n    'fieldset': 0,\n    'font': 0,\n    'form': 0,\n    'frame': 18,\n    'frameset': 16,\n    'h1': 0,\n    'h2': 0,\n    'h3': 0,\n    'h4': 0,\n    'h5': 0,\n    'h6': 0,\n    'head': 49,\n    'hr': 2,\n    'html': 49,\n    'i': 0,\n    'iframe': 4,\n    'img': 2,\n    'input': 2,\n    'ins': 0,\n    'isindex': 18,\n    'kbd': 0,\n    'label': 0,\n    'legend': 0,\n    'li': 1,\n    'link': 18,\n    'map': 0,\n    'menu': 0,\n    'meta': 18,\n    'noframes': 20,\n    'noscript': 20,\n    'object': 16,\n    'ol': 0,\n    'optgroup': 0,\n    'option': 1,\n    'p': 1,\n    'param': 18,\n    'pre': 0,\n    'q': 0,\n    's': 0,\n    'samp': 0,\n    'script': 84,\n    'select': 0,\n    'small': 0,\n    'span': 0,\n    'strike': 0,\n    'strong': 0,\n    'style': 148,\n    'sub': 0,\n    'sup': 0,\n    'table': 0,\n    'tbody': 1,\n    'td': 1,\n    'textarea': 8,\n    'tfoot': 1,\n    'th': 1,\n    'thead': 1,\n    'title': 24,\n    'tr': 1,\n    'tt': 0,\n    'u': 0,\n    'ul': 0,\n    'var': 0\n};\n\nhtml4 .URIEFFECTS = {\n\n};\nhtml4 .LOADERTYPES = {}\n\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n        exports = module.exports = html4;\n    }\n    exports.URI = html4;\n} else {\n\n    // Exports for closure compiler.\n    if (typeof window !== 'undefined') {\n        window['html4'] = html4;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-sanitizer/node_modules/sanitizer/lib/uri.js":"// Copyright (C) 2010 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview\n * Implements RFC 3986 for parsing/formatting URIs.\n *\n * @author mikesamuel@gmail.com\n * \\@provides URI\n * \\@overrides window\n */\n\nvar URI = (function () {\n\n    /**\n     * creates a uri from the string form.  The parser is relaxed, so special\n     * characters that aren't escaped but don't cause ambiguities will not cause\n     * parse failures.\n     *\n     * @return {URI|null}\n     */\n    function parse(uriStr) {\n        var m = ('' + uriStr).match(URI_RE_);\n        if (!m) { return null; }\n        return new URI(\n            nullIfAbsent(m[1]),\n            nullIfAbsent(m[2]),\n            nullIfAbsent(m[3]),\n            nullIfAbsent(m[4]),\n            nullIfAbsent(m[5]),\n            nullIfAbsent(m[6]),\n            nullIfAbsent(m[7]));\n    }\n\n\n    /**\n     * creates a uri from the given parts.\n     *\n     * @param scheme {string} an unencoded scheme such as \"http\" or null\n     * @param credentials {string} unencoded user credentials or null\n     * @param domain {string} an unencoded domain name or null\n     * @param port {number} a port number in [1, 32768].\n     *    -1 indicates no port, as does null.\n     * @param path {string} an unencoded path\n     * @param query {Array.<string>|string|null} a list of unencoded cgi\n     *   parameters where even values are keys and odds the corresponding values\n     *   or an unencoded query.\n     * @param fragment {string} an unencoded fragment without the \"#\" or null.\n     * @return {URI}\n     */\n    function create(scheme, credentials, domain, port, path, query, fragment) {\n        var uri = new URI(\n            encodeIfExists2(scheme, URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_),\n            encodeIfExists2(\n                credentials, URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_),\n            encodeIfExists(domain),\n            port > 0 ? port.toString() : null,\n            encodeIfExists2(path, URI_DISALLOWED_IN_PATH_),\n            null,\n            encodeIfExists(fragment));\n        if (query) {\n            if ('string' === typeof query) {\n                uri.setRawQuery(query.replace(/[^?&=0-9A-Za-z_\\-~.%]/g, encodeOne));\n            } else {\n                uri.setAllParameters(query);\n            }\n        }\n        return uri;\n    }\n    function encodeIfExists(unescapedPart) {\n        if ('string' == typeof unescapedPart) {\n            return encodeURIComponent(unescapedPart);\n        }\n        return null;\n    };\n    /**\n     * if unescapedPart is non null, then escapes any characters in it that aren't\n     * valid characters in a url and also escapes any special characters that\n     * appear in extra.\n     *\n     * @param unescapedPart {string}\n     * @param extra {RegExp} a character set of characters in [\\01-\\177].\n     * @return {string|null} null iff unescapedPart == null.\n     */\n    function encodeIfExists2(unescapedPart, extra) {\n        if ('string' == typeof unescapedPart) {\n            return encodeURI(unescapedPart).replace(extra, encodeOne);\n        }\n        return null;\n    };\n    /** converts a character in [\\01-\\177] to its url encoded equivalent. */\n    function encodeOne(ch) {\n        var n = ch.charCodeAt(0);\n        return '%' + '0123456789ABCDEF'.charAt((n >> 4) & 0xf) +\n            '0123456789ABCDEF'.charAt(n & 0xf);\n    }\n\n    /**\n     * {@updoc\n     *  $ normPath('foo/./bar')\n     *  # 'foo/bar'\n     *  $ normPath('./foo')\n     *  # 'foo'\n     *  $ normPath('foo/.')\n     *  # 'foo'\n     *  $ normPath('foo//bar')\n     *  # 'foo/bar'\n     * }\n     */\n    function normPath(path) {\n        return path.replace(/(^|\\/)\\.(?:\\/|$)/g, '$1').replace(/\\/{2,}/g, '/');\n    }\n\n    var PARENT_DIRECTORY_HANDLER = new RegExp(\n        ''\n            // A path break\n            + '(/|^)'\n            // followed by a non .. path element\n            // (cannot be . because normPath is used prior to this RegExp)\n            + '(?:[^./][^/]*|\\\\.{2,}(?:[^./][^/]*)|\\\\.{3,}[^/]*)'\n            // followed by .. followed by a path break.\n            + '/\\\\.\\\\.(?:/|$)');\n\n    var PARENT_DIRECTORY_HANDLER_RE = new RegExp(PARENT_DIRECTORY_HANDLER);\n\n    var EXTRA_PARENT_PATHS_RE = /^(?:\\.\\.\\/)*(?:\\.\\.$)?/;\n\n    /**\n     * Normalizes its input path and collapses all . and .. sequences except for\n     * .. sequences that would take it above the root of the current parent\n     * directory.\n     * {@updoc\n     *  $ collapse_dots('foo/../bar')\n     *  # 'bar'\n     *  $ collapse_dots('foo/./bar')\n     *  # 'foo/bar'\n     *  $ collapse_dots('foo/../bar/./../../baz')\n     *  # 'baz'\n     *  $ collapse_dots('../foo')\n     *  # '../foo'\n     *  $ collapse_dots('../foo').replace(EXTRA_PARENT_PATHS_RE, '')\n     *  # 'foo'\n     * }\n     */\n    function collapse_dots(path) {\n        if (path === null) { return null; }\n        var p = normPath(path);\n        // Only /../ left to flatten\n        var r = PARENT_DIRECTORY_HANDLER_RE;\n        // We replace with $1 which matches a / before the .. because this\n        // guarantees that:\n        // (1) we have at most 1 / between the adjacent place,\n        // (2) always have a slash if there is a preceding path section, and\n        // (3) we never turn a relative path into an absolute path.\n        for (var q; (q = p.replace(r, '$1')) != p; p = q) {};\n        return p;\n    }\n\n    /**\n     * resolves a relative url string to a base uri.\n     * @return {URI}\n     */\n    function resolve(baseUri, relativeUri) {\n        // there are several kinds of relative urls:\n        // 1. //foo - replaces everything from the domain on.  foo is a domain name\n        // 2. foo - replaces the last part of the path, the whole query and fragment\n        // 3. /foo - replaces the the path, the query and fragment\n        // 4. ?foo - replace the query and fragment\n        // 5. #foo - replace the fragment only\n\n        var absoluteUri = baseUri.clone();\n        // we satisfy these conditions by looking for the first part of relativeUri\n        // that is not blank and applying defaults to the rest\n\n        var overridden = relativeUri.hasScheme();\n\n        if (overridden) {\n            absoluteUri.setRawScheme(relativeUri.getRawScheme());\n        } else {\n            overridden = relativeUri.hasCredentials();\n        }\n\n        if (overridden) {\n            absoluteUri.setRawCredentials(relativeUri.getRawCredentials());\n        } else {\n            overridden = relativeUri.hasDomain();\n        }\n\n        if (overridden) {\n            absoluteUri.setRawDomain(relativeUri.getRawDomain());\n        } else {\n            overridden = relativeUri.hasPort();\n        }\n\n        var rawPath = relativeUri.getRawPath();\n        var simplifiedPath = collapse_dots(rawPath);\n        if (overridden) {\n            absoluteUri.setPort(relativeUri.getPort());\n            simplifiedPath = simplifiedPath\n                && simplifiedPath.replace(EXTRA_PARENT_PATHS_RE, '');\n        } else {\n            overridden = !!rawPath;\n            if (overridden) {\n                // resolve path properly\n                if (simplifiedPath.charCodeAt(0) !== 0x2f /* / */) {  // path is relative\n                    var absRawPath = collapse_dots(absoluteUri.getRawPath() || '')\n                        .replace(EXTRA_PARENT_PATHS_RE, '');\n                    var slash = absRawPath.lastIndexOf('/') + 1;\n                    simplifiedPath = collapse_dots(\n                        (slash ? absRawPath.substring(0, slash) : '')\n                            + collapse_dots(rawPath))\n                        .replace(EXTRA_PARENT_PATHS_RE, '');\n                }\n            } else {\n                simplifiedPath = simplifiedPath\n                    && simplifiedPath.replace(EXTRA_PARENT_PATHS_RE, '');\n                if (simplifiedPath !== rawPath) {\n                    absoluteUri.setRawPath(simplifiedPath);\n                }\n            }\n        }\n\n        if (overridden) {\n            absoluteUri.setRawPath(simplifiedPath);\n        } else {\n            overridden = relativeUri.hasQuery();\n        }\n\n        if (overridden) {\n            absoluteUri.setRawQuery(relativeUri.getRawQuery());\n        } else {\n            overridden = relativeUri.hasFragment();\n        }\n\n        if (overridden) {\n            absoluteUri.setRawFragment(relativeUri.getRawFragment());\n        }\n\n        return absoluteUri;\n    }\n\n    /**\n     * a mutable URI.\n     *\n     * This class contains setters and getters for the parts of the URI.\n     * The <tt>getXYZ</tt>/<tt>setXYZ</tt> methods return the decoded part -- so\n     * <code>uri.parse('/foo%20bar').getPath()</code> will return the decoded path,\n     * <tt>/foo bar</tt>.\n     *\n     * <p>The raw versions of fields are available too.\n     * <code>uri.parse('/foo%20bar').getRawPath()</code> will return the raw path,\n     * <tt>/foo%20bar</tt>.  Use the raw setters with care, since\n     * <code>URI::toString</code> is not guaranteed to return a valid url if a\n     * raw setter was used.\n     *\n     * <p>All setters return <tt>this</tt> and so may be chained, a la\n     * <code>uri.parse('/foo').setFragment('part').toString()</code>.\n     *\n     * <p>You should not use this constructor directly -- please prefer the factory\n     * functions {@link uri.parse}, {@link uri.create}, {@link uri.resolve}\n     * instead.</p>\n     *\n     * <p>The parameters are all raw (assumed to be properly escaped) parts, and\n     * any (but not all) may be null.  Undefined is not allowed.</p>\n     *\n     * @constructor\n     */\n    function URI(\n        rawScheme,\n        rawCredentials, rawDomain, port,\n        rawPath, rawQuery, rawFragment) {\n        this.scheme_ = rawScheme;\n        this.credentials_ = rawCredentials;\n        this.domain_ = rawDomain;\n        this.port_ = port;\n        this.path_ = rawPath;\n        this.query_ = rawQuery;\n        this.fragment_ = rawFragment;\n        /**\n         * @type {Array|null}\n         */\n        this.paramCache_ = null;\n    }\n\n    /** returns the string form of the url. */\n    URI.prototype.toString = function () {\n        var out = [];\n        if (null !== this.scheme_) { out.push(this.scheme_, ':'); }\n        if (null !== this.domain_) {\n            out.push('//');\n            if (null !== this.credentials_) { out.push(this.credentials_, '@'); }\n            out.push(this.domain_);\n            if (null !== this.port_) { out.push(':', this.port_.toString()); }\n        }\n        if (null !== this.path_) { out.push(this.path_); }\n        if (null !== this.query_) { out.push('?', this.query_); }\n        if (null !== this.fragment_) { out.push('#', this.fragment_); }\n        return out.join('');\n    };\n\n    URI.prototype.clone = function () {\n        return new URI(this.scheme_, this.credentials_, this.domain_, this.port_,\n            this.path_, this.query_, this.fragment_);\n    };\n\n    URI.prototype.getScheme = function () {\n        // HTML5 spec does not require the scheme to be lowercased but\n        // all common browsers except Safari lowercase the scheme.\n        return this.scheme_ && decodeURIComponent(this.scheme_).toLowerCase();\n    };\n    URI.prototype.getRawScheme = function () {\n        return this.scheme_;\n    };\n    URI.prototype.setScheme = function (newScheme) {\n        this.scheme_ = encodeIfExists2(\n            newScheme, URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_);\n        return this;\n    };\n    URI.prototype.setRawScheme = function (newScheme) {\n        this.scheme_ = newScheme ? newScheme : null;\n        return this;\n    };\n    URI.prototype.hasScheme = function () {\n        return null !== this.scheme_;\n    };\n\n\n    URI.prototype.getCredentials = function () {\n        return this.credentials_ && decodeURIComponent(this.credentials_);\n    };\n    URI.prototype.getRawCredentials = function () {\n        return this.credentials_;\n    };\n    URI.prototype.setCredentials = function (newCredentials) {\n        this.credentials_ = encodeIfExists2(\n            newCredentials, URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_);\n\n        return this;\n    };\n    URI.prototype.setRawCredentials = function (newCredentials) {\n        this.credentials_ = newCredentials ? newCredentials : null;\n        return this;\n    };\n    URI.prototype.hasCredentials = function () {\n        return null !== this.credentials_;\n    };\n\n\n    URI.prototype.getDomain = function () {\n        return this.domain_ && decodeURIComponent(this.domain_);\n    };\n    URI.prototype.getRawDomain = function () {\n        return this.domain_;\n    };\n    URI.prototype.setDomain = function (newDomain) {\n        return this.setRawDomain(newDomain && encodeURIComponent(newDomain));\n    };\n    URI.prototype.setRawDomain = function (newDomain) {\n        this.domain_ = newDomain ? newDomain : null;\n        // Maintain the invariant that paths must start with a slash when the URI\n        // is not path-relative.\n        return this.setRawPath(this.path_);\n    };\n    URI.prototype.hasDomain = function () {\n        return null !== this.domain_;\n    };\n\n\n    URI.prototype.getPort = function () {\n        return this.port_ && decodeURIComponent(this.port_);\n    };\n    URI.prototype.setPort = function (newPort) {\n        if (newPort) {\n            newPort = Number(newPort);\n            if (newPort !== (newPort & 0xffff)) {\n                throw new Error('Bad port number ' + newPort);\n            }\n            this.port_ = '' + newPort;\n        } else {\n            this.port_ = null;\n        }\n        return this;\n    };\n    URI.prototype.hasPort = function () {\n        return null !== this.port_;\n    };\n\n\n    URI.prototype.getPath = function () {\n        return this.path_ && decodeURIComponent(this.path_);\n    };\n    URI.prototype.getRawPath = function () {\n        return this.path_;\n    };\n    URI.prototype.setPath = function (newPath) {\n        return this.setRawPath(encodeIfExists2(newPath, URI_DISALLOWED_IN_PATH_));\n    };\n    URI.prototype.setRawPath = function (newPath) {\n        if (newPath) {\n            newPath = String(newPath);\n            this.path_ =\n                // Paths must start with '/' unless this is a path-relative URL.\n                (!this.domain_ || /^\\//.test(newPath)) ? newPath : '/' + newPath;\n        } else {\n            this.path_ = null;\n        }\n        return this;\n    };\n    URI.prototype.hasPath = function () {\n        return null !== this.path_;\n    };\n\n\n    URI.prototype.getQuery = function () {\n        // From http://www.w3.org/Addressing/URL/4_URI_Recommentations.html\n        // Within the query string, the plus sign is reserved as shorthand notation\n        // for a space.\n        return this.query_ && decodeURIComponent(this.query_).replace(/\\+/g, ' ');\n    };\n    URI.prototype.getRawQuery = function () {\n        return this.query_;\n    };\n    URI.prototype.setQuery = function (newQuery) {\n        this.paramCache_ = null;\n        this.query_ = encodeIfExists(newQuery);\n        return this;\n    };\n    URI.prototype.setRawQuery = function (newQuery) {\n        this.paramCache_ = null;\n        this.query_ = newQuery ? newQuery : null;\n        return this;\n    };\n    URI.prototype.hasQuery = function () {\n        return null !== this.query_;\n    };\n\n    /**\n     * sets the query given a list of strings of the form\n     * [ key0, value0, key1, value1, ... ].\n     *\n     * <p><code>uri.setAllParameters(['a', 'b', 'c', 'd']).getQuery()</code>\n     * will yield <code>'a=b&c=d'</code>.\n     */\n    URI.prototype.setAllParameters = function (params) {\n        if (typeof params === 'object') {\n            if (!(params instanceof Array)\n                && (params instanceof Object\n                || Object.prototype.toString.call(params) !== '[object Array]')) {\n                var newParams = [];\n                var i = -1;\n                for (var k in params) {\n                    var v = params[k];\n                    if ('string' === typeof v) {\n                        newParams[++i] = k;\n                        newParams[++i] = v;\n                    }\n                }\n                params = newParams;\n            }\n        }\n        this.paramCache_ = null;\n        var queryBuf = [];\n        var separator = '';\n        for (var j = 0; j < params.length;) {\n            var k = params[j++];\n            var v = params[j++];\n            queryBuf.push(separator, encodeURIComponent(k.toString()));\n            separator = '&';\n            if (v) {\n                queryBuf.push('=', encodeURIComponent(v.toString()));\n            }\n        }\n        this.query_ = queryBuf.join('');\n        return this;\n    };\n    URI.prototype.checkParameterCache_ = function () {\n        if (!this.paramCache_) {\n            var q = this.query_;\n            if (!q) {\n                this.paramCache_ = [];\n            } else {\n                var cgiParams = q.split(/[&\\?]/);\n                var out = [];\n                var k = -1;\n                for (var i = 0; i < cgiParams.length; ++i) {\n                    var m = cgiParams[i].match(/^([^=]*)(?:=(.*))?$/);\n                    // From http://www.w3.org/Addressing/URL/4_URI_Recommentations.html\n                    // Within the query string, the plus sign is reserved as shorthand\n                    // notation for a space.\n                    out[++k] = decodeURIComponent(m[1]).replace(/\\+/g, ' ');\n                    out[++k] = decodeURIComponent(m[2] || '').replace(/\\+/g, ' ');\n                }\n                this.paramCache_ = out;\n            }\n        }\n    };\n    /**\n     * sets the values of the named cgi parameters.\n     *\n     * <p>So, <code>uri.parse('foo?a=b&c=d&e=f').setParameterValues('c', ['new'])\n     * </code> yields <tt>foo?a=b&c=new&e=f</tt>.</p>\n     *\n     * @param key {string}\n     * @param values {Array.<string>} the new values.  If values is a single string\n     *   then it will be treated as the sole value.\n     */\n    URI.prototype.setParameterValues = function (key, values) {\n        // be nice and avoid subtle bugs where [] operator on string performs charAt\n        // on some browsers and crashes on IE\n        if (typeof values === 'string') {\n            values = [ values ];\n        }\n\n        this.checkParameterCache_();\n        var newValueIndex = 0;\n        var pc = this.paramCache_;\n        var params = [];\n        for (var i = 0, k = 0; i < pc.length; i += 2) {\n            if (key === pc[i]) {\n                if (newValueIndex < values.length) {\n                    params.push(key, values[newValueIndex++]);\n                }\n            } else {\n                params.push(pc[i], pc[i + 1]);\n            }\n        }\n        while (newValueIndex < values.length) {\n            params.push(key, values[newValueIndex++]);\n        }\n        this.setAllParameters(params);\n        return this;\n    };\n    URI.prototype.removeParameter = function (key) {\n        return this.setParameterValues(key, []);\n    };\n    /**\n     * returns the parameters specified in the query part of the uri as a list of\n     * keys and values like [ key0, value0, key1, value1, ... ].\n     *\n     * @return {Array.<string>}\n     */\n    URI.prototype.getAllParameters = function () {\n        this.checkParameterCache_();\n        return this.paramCache_.slice(0, this.paramCache_.length);\n    };\n    /**\n     * returns the value<b>s</b> for a given cgi parameter as a list of decoded\n     * query parameter values.\n     * @return {Array.<string>}\n     */\n    URI.prototype.getParameterValues = function (paramNameUnescaped) {\n        this.checkParameterCache_();\n        var values = [];\n        for (var i = 0; i < this.paramCache_.length; i += 2) {\n            if (paramNameUnescaped === this.paramCache_[i]) {\n                values.push(this.paramCache_[i + 1]);\n            }\n        }\n        return values;\n    };\n    /**\n     * returns a map of cgi parameter names to (non-empty) lists of values.\n     * @return {Object.<string,Array.<string>>}\n     */\n    URI.prototype.getParameterMap = function (paramNameUnescaped) {\n        this.checkParameterCache_();\n        var paramMap = {};\n        for (var i = 0; i < this.paramCache_.length; i += 2) {\n            var key = this.paramCache_[i++],\n                value = this.paramCache_[i++];\n            if (!(key in paramMap)) {\n                paramMap[key] = [value];\n            } else {\n                paramMap[key].push(value);\n            }\n        }\n        return paramMap;\n    };\n    /**\n     * returns the first value for a given cgi parameter or null if the given\n     * parameter name does not appear in the query string.\n     * If the given parameter name does appear, but has no '<tt>=</tt>' following\n     * it, then the empty string will be returned.\n     * @return {string|null}\n     */\n    URI.prototype.getParameterValue = function (paramNameUnescaped) {\n        this.checkParameterCache_();\n        for (var i = 0; i < this.paramCache_.length; i += 2) {\n            if (paramNameUnescaped === this.paramCache_[i]) {\n                return this.paramCache_[i + 1];\n            }\n        }\n        return null;\n    };\n\n    URI.prototype.getFragment = function () {\n        return this.fragment_ && decodeURIComponent(this.fragment_);\n    };\n    URI.prototype.getRawFragment = function () {\n        return this.fragment_;\n    };\n    URI.prototype.setFragment = function (newFragment) {\n        this.fragment_ = newFragment ? encodeURIComponent(newFragment) : null;\n        return this;\n    };\n    URI.prototype.setRawFragment = function (newFragment) {\n        this.fragment_ = newFragment ? newFragment : null;\n        return this;\n    };\n    URI.prototype.hasFragment = function () {\n        return null !== this.fragment_;\n    };\n\n    function nullIfAbsent(matchPart) {\n        return ('string' == typeof matchPart) && (matchPart.length > 0)\n            ? matchPart\n            : null;\n    }\n\n\n\n\n    /**\n     * a regular expression for breaking a URI into its component parts.\n     *\n     * <p>http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234 says\n     * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n     * disambiguation method used by POSIX regular expressions, it is natural and\n     * commonplace to use a regular expression for parsing the potential five\n     * components of a URI reference.\n     *\n     * <p>The following line is the regular expression for breaking-down a\n     * well-formed URI reference into its components.\n     *\n     * <pre>\n     * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n     *  12            3  4          5       6  7        8 9\n     * </pre>\n     *\n     * <p>The numbers in the second line above are only to assist readability; they\n     * indicate the reference points for each subexpression (i.e., each paired\n     * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n     * For example, matching the above expression to\n     * <pre>\n     *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n     * </pre>\n     * results in the following subexpression matches:\n     * <pre>\n     *    $1 = http:\n     *    $2 = http\n     *    $3 = //www.ics.uci.edu\n     *    $4 = www.ics.uci.edu\n     *    $5 = /pub/ietf/uri/\n     *    $6 = <undefined>\n     *    $7 = <undefined>\n     *    $8 = #Related\n     *    $9 = Related\n     * </pre>\n     * where <undefined> indicates that the component is not present, as is the\n     * case for the query component in the above example. Therefore, we can\n     * determine the value of the five components as\n     * <pre>\n     *    scheme    = $2\n     *    authority = $4\n     *    path      = $5\n     *    query     = $7\n     *    fragment  = $9\n     * </pre>\n     *\n     * <p>msamuel: I have modified the regular expression slightly to expose the\n     * credentials, domain, and port separately from the authority.\n     * The modified version yields\n     * <pre>\n     *    $1 = http              scheme\n     *    $2 = <undefined>       credentials -\\\n     *    $3 = www.ics.uci.edu   domain       | authority\n     *    $4 = <undefined>       port        -/\n     *    $5 = /pub/ietf/uri/    path\n     *    $6 = <undefined>       query without ?\n     *    $7 = Related           fragment without #\n     * </pre>\n     */\n    var URI_RE_ = new RegExp(\n        \"^\" +\n            \"(?:\" +\n            \"([^:/?#]+)\" +         // scheme\n            \":)?\" +\n            \"(?://\" +\n            \"(?:([^/?#]*)@)?\" +    // credentials\n            \"([^/?#:@]*)\" +        // domain\n            \"(?::([0-9]+))?\" +     // port\n            \")?\" +\n            \"([^?#]+)?\" +            // path\n            \"(?:\\\\?([^#]*))?\" +      // query\n            \"(?:#(.*))?\" +           // fragment\n            \"$\"\n    );\n\n    var URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_ = /[#\\/\\?@]/g;\n    var URI_DISALLOWED_IN_PATH_ = /[\\#\\?]/g;\n\n    URI.parse = parse;\n    URI.create = create;\n    URI.resolve = resolve;\n    URI.collapse_dots = collapse_dots;  // Visible for testing.\n\n// lightweight string-based api for loadModuleMaker\n    URI.utils = {\n        mimeTypeOf: function (uri) {\n            var uriObj = parse(uri);\n            if (/\\.html$/.test(uriObj.getPath())) {\n                return 'text/html';\n            } else {\n                return 'application/javascript';\n            }\n        },\n        resolve: function (base, uri) {\n            if (base) {\n                return resolve(parse(base), parse(uri)).toString();\n            } else {\n                return '' + uri;\n            }\n        }\n    };\n\n\n    return URI;\n})();\n\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n        exports = module.exports = URI;\n    }\n    exports.URI = URI;\n} else {\n\n    // Exports for closure compiler.\n    if (typeof window !== 'undefined') {\n        window['URI'] = URI;\n    }\n}\n"}